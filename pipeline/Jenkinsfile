#!groovy?
pipeline{
    agent{
        docker {
            image 'axyres/dockercentos:7-latest'
            args '--user=0 -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '8', artifactNumToKeepStr: '8', daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
    }
    environment {
        CredentialID="credential_docker_axyreshub"
        CredentialID_Nexus="credential_nexus_admin"
        Tag="1.0"
        RepoDockerHub="axyres"
    }
    parameters {
        string(name: "buildVersion", defaultValue: '', description: 'Build Version')
        string(name: "buildBranch", defaultValue: '', description: 'Build Branch')
        string(name: "artifactId", defaultValue: '', description: 'Project Name')
        string(name: "Version", defaultValue: '', description: 'Version Project')
        string(name: "Nexus_URL", defaultValue: 'http://192.168.1.2/nexus/repository', description: 'URL of Atifactory')
        string(name: "Repository_Nexus", defaultValue: 'maven-snapshots', description: 'Repository of artifactory')
        string(name: "image1", defaultValue: '', description: 'Name Image')
        booleanParam(name: 'PJ_admin', defaultValue: 'false', description: 'Build Admin Image')
        booleanParam(name: 'Start_container', defaultValue: 'false', description: 'Start container')
        booleanParam(name: 'Push_images_to_Hub', defaultValue: 'false', description: 'Push images to AxyResHub')
    }
    stages{
        stage('Stage 1 Get Package from artifactory'){
            steps{
                withCredentials([usernamePassword(credentialsId: "$CredentialID_Nexus", passwordVariable:'ARTIFACTORY_PASSWORD', usernameVariable:'ARTIFACTORY_USER')]) {
                    sh """
                        mkdir -p packages/
                        rm -rf packages/*
                        cd packages/
                        echo Start download package
                        if [ $PJ_admin == true ]
                        then
                            curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" -O ${Nexus_URL}/${Repository_Nexus}/admin/${artifactId}/${buildBranch}/${buildVersion}/${artifactId}-${Version}.war
                            mv ${artifactId}-${Version}.war ${artifactId}.war
                        fi
                        echo Done download package
                    """
                }
            }
        }
        stage('Stage 2 Prepare the package'){
            steps{
                script{
                    sh'''
                        prepare_package () {
                            app=$1
                            package=${artifactId}.war
                            cp -f ${WORKSPACE}/packages/${artifactId}.war ${WORKSPACE}/docker/$app/dockerfile/${artifactId}.war
                            cd ${WORKSPACE}/docker/$app/dockerfile/
                            sed -i "s|\\$package_file|$package|g" Dockerfile
                        }
                        [[ $PJ_admin == "true" ]] && prepare_package $image1
                    '''
                }
            }
        }
        stage('Stage 3 Build Docker Image'){
            steps{
                script{
                    sh'''
                        echo Start Build Docker Image
                        build_docker () {
                            service=$1
                            start_containers="--no-start"
                            detach=""
                            echo webapps_$service
                            docker rm -f $service || true
                            docker rmi -f $service || true
                            docker volume rm webapps_$service || true
                            docker volume create webapps_$service
                            [[ $Start_container == "true" ]] && start_containers="" && detach="--detach"
                            cd ${WORKSPACE}/docker && /usr/local/bin/docker-compose up $detach --force-recreate --build $start_containers $service
                        }
                        [[ $PJ_admin == "true" ]] && build_docker $image1
                        echo End Build Docker Images
                    '''
                }
            }
        }
        stage('Stage 4 Push image to Docker Hub') {
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: "$CredentialID", passwordVariable:'ARTIFACTORY_PASSWORD', usernameVariable:'ARTIFACTORY_USER')]) {
                        sh '''
                            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASSWORD}
                            upload_docker_images_to_Hub () {
                                image=$1
                                if [ $Push_images_to_Hub == "true" ]
                                then
                                    echo Start Push image to Docker Hub
                                    docker tag $image ${RepoDockerHub}/$image1-${buildBranch}:$Tag-${buildVersion}
                                    docker push ${RepoDockerHub}/$image1-${buildBranch}:$Tag-${buildVersion}
                                fi
                            }
                            [[ $PJ_admin == "true" ]] && upload_docker_images_to_Hub $image1:$Tag
                        '''
                    }
                }
            }
        }
    }
    post{
        always{
            echo 'One way or another, I have finished'
            deleteDir()
        }
    }
}

String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().split("\\.")[0]
}