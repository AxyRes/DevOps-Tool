#!groovy?
pipeline{
    agent{
        docker {
            image 'maven:3.8.6-amazoncorretto-17'
            args '--user=0 -v $WORKSPACE:/tmp/sbapp -w /temp/sbapp'
            reuseNode true
        }
    }
    environment {
        Version="1.0-SNAPSHOT"
        PJNAME="QuizOnline"
        Branch="dev"
        CredentialID="credential_axyres_github"
        CredentialID_Nexus="credential_nexus_admin"
        gitRepo="https://github.com/AxyRes/Quiz-Online.git"
    }
    stages{
        stage('Stage 1 Getting build number'){
            steps{
                script{
                    def now = new Date()
					buildVersion =  now.format("yyyy.MM.dd.HHmm", TimeZone.getTimeZone('UTC'))
					currentBuild.displayName = "${buildVersion}"
                }
            }
        }
        stage('Stage 2 Checkout Code'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: "$Branch"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 90], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 90], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', timeout: 90, trackingSubmodules: true]], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: "$CredentialID", url: "$gitRepo"]]])
            }
        }
        stage('Stage 3 Get commit harsh'){
            steps{
                sh"""
                    yum install git zip unzip -y
                    cd ${WORKSPACE}/
                    echo "${PJNAME}" > ${WORKSPACE}/commit.txt
                    /bin/git log -1 --pretty=format:'%h, %an, %ar, %aD, %s' >> ${WORKSPACE}/commit.txt
					echo "\n############################################" >> ${WORKSPACE}/commit.txt

                """
            }
        }
        stage('Stage 4 Build Code'){
            steps{
                script{
                    sh"""
                        echo 'Start Build Code'
                        mvn clean install -DskipTests=true -U -Dversion=${Version}

                        echo 'End Build Code'
                    """
                }
            }
        }
        stage('Stage 5 Upload to Nexus Repository') {
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: "$CredentialID_Nexus", passwordVariable:'ARTIFACTORY_PASSWORD', usernameVariable:'ARTIFACTORY_USER')]) {
                        sh"""
                            echo Start Push pakage to Artifactory ......

                            curl -v -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" --upload-file "${WORKSPACE}/target/${PJNAME}-${Version}.war" "http://192.168.1.2/nexus/repository/maven-snapshots/admin/${PJNAME}/${Branch}/latest/${PJNAME}-${Version}.war"
                            curl -v -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" --upload-file "${WORKSPACE}/target/${PJNAME}-${Version}.war" "http://192.168.1.2/nexus/repository/maven-snapshots/admin/${PJNAME}/${Branch}/${buildVersion}/${PJNAME}-${Version}.war"

                            echo End Upload package ......
                        """
                    }
                }
            }
        }
        stage('Stage 6 Trigger build job image') {
            steps {
                script {
                    build job: "Quiz-Online-Dev-Image", parameters: [
                        string(name: "buildVersion", value: "${buildVersion}"),
                        string(name: "buildBranch", value: "${Branch}"),
                        string(name: "PJNAME", value: "${PJNAME}"),
                        string(name: "Version", value: "${Version}"),
                        booleanParam(name: 'PJ_admin', value: 'true'),
                        booleanParam(name: 'Start_container', value: 'true'),
                        booleanParam(name: 'Push_images_to_Hub', value: 'true')
                    ],
                    wait: true
                }
            }
        }
    }
    post{
        always{
            echo 'One way or another, I have finished'
            deleteDir()
            sendEmail()
        }
        success {
            emailext(
                subject: "[BUILD SUCCESS] - PROJECT: ${PJNAME} - BRANCH: ${Branch} - VERSION: ${buildVersion}",
                body: '''
                    <p>Hi All,</p>
                    <p> *** This is an automatically generated email. Please do not reply ***</p>
                    <p>Please review <strong><u>your change</u></strong> below:</p>
                    <p>${CHANGES, showPaths=true, format="<div><b style=\\"color:blue;\\">%a: %m</b>: %d %p </div><div style=\\"padding-left:30px;\\"> &#8212; &#8220;<em>%r</em>&#8221;</div>", pathFormat="</div><div style=\\"padding-left:30px;\\">%p"}</p>
                ''',
                mimeType: 'text/html',
                to: "nhattien.lam.454@gmail.com",
                replyTo:'jenkins-notification@gmail.com'
            )
        }
        failure{
            emailext(
                subject: "[BUILD FAILED] - PROJECT: ${PJNAME} - BRANCH: ${Branch} - VERSION: ${buildVersion}",
                body: '''
                    <p>Hi All,</p>
                    <p> *** This is an automatically generated email. Please do not reply ***</p>
                    <p>Please review <strong><u>your change</u></strong> below:</p>
                    <p>${CHANGES, showPaths=true, format="<div><b style=\\"color:blue;\\">%a: %m</b>: %d %p </div><div style=\\"padding-left:30px;\\"> &#8212; &#8220;<em>%r</em>&#8221;</div>", pathFormat="</div><div style=\\"padding-left:30px;\\">%p"}</p>
                ''',
                mimeType: 'text/html',
                to: "nhattien.lam.454@gmail.com",
                replyTo:'jenkins-notification@gmail.com'
            )
        }
    }
}
String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().split("\\.")[0]
}
def sendEmail() {
    def url = "https://api.sendgrid.com/v3/mail/send"
    def apiKey = "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"
    def from = "nhattien.lam.545@gmail.com"
    def to = "tien.lamnhat2308@gmail.com"
    def subject = "Test Email"
    def body = "This is a test email sent from Jenkins pipeline using SendGrid API."

    def payload = """
        {
            "personalizations": [
                {
                    "to": [
                        {
                            "email": "${to}"
                        }
                    ]
                }
            ],
            "from": {
                "email": "${from}"
            },
            "subject": "${subject}",
            "content": [
                {
                    "type": "text/plain",
                    "value": "${body}"
                }
            ]
        }
    """

    sh """
        curl -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${apiKey}" \
        -d '${payload}' \
        '${url}'
    """
}